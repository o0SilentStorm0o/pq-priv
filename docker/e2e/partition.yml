# partition.yml - Network partition + reorg test
#
# Test scenario:
#   Phase 1: Two isolated nodes mine independently
#     - iso_a mines 200 blocks
#     - iso_b mines 250 blocks
#   Phase 2: Bridge node connects both, triggering reorg
#     - Bridge connects to both iso_a and iso_b
#     - Shorter chain (iso_a) should reorg to longer chain (iso_b)
#     - Verify orphan pool clears and reorg counter increments
#
# Usage:
#   # Start isolated miners
#   docker compose -f docker/e2e/partition.yml up --build iso_a iso_b
#   
#   # Wait for both to finish mining
#   
#   # In separate terminal, start bridge to trigger reorg
#   docker compose -f docker/e2e/partition.yml up bridge
#
# Verification:
#   - Both nodes converge to height 250 (iso_b's chain)
#   - iso_a's reorg_count_total increments
#   - Orphan pool size returns to 0
#   - Bridge node syncs to height 250

services:
  iso_a:
    image: pqpriv:dev
    container_name: pq_partition_a
    environment:
      - E2E_FIXED_GENESIS=1
    command:
      - "run"
      - "--config=/config/partition_iso_a.toml"
    volumes:
      - ./data/partition/a:/data
      - ./config:/config:ro
    networks:
      partition_net:
        ipv4_address: 172.30.0.20
    ports:
      - "9021:9021"
      - "8560:8560"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8560/health"]
      interval: 5s
      timeout: 3s
      retries: 3

  iso_b:
    image: pqpriv:dev
    container_name: pq_partition_b
    environment:
      - E2E_FIXED_GENESIS=1
    command:
      - "run"
      - "--config=/config/partition_iso_b.toml"
    volumes:
      - ./data/partition/b:/data
      - ./config:/config:ro
    networks:
      partition_net:
        ipv4_address: 172.30.0.21
    ports:
      - "9022:9022"
      - "8561:8561"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8561/health"]
      interval: 5s
      timeout: 3s
      retries: 3

  bridge:
    image: pqpriv:dev
    container_name: pq_partition_bridge
    environment:
      - E2E_FIXED_GENESIS=1
    command:
      - "run"
      - "--config=/config/partition_bridge.toml"
    volumes:
      - ./data/partition/bridge:/data
      - ./config:/config:ro
    networks:
      partition_net:
        ipv4_address: 172.30.0.30
    ports:
      - "9023:9023"
      - "8562:8562"
    depends_on:
      iso_a:
        condition: service_healthy
      iso_b:
        condition: service_healthy
    profiles:
      - bridge  # Only start when explicitly requested

networks:
  partition_net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/24
