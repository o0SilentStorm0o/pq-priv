name: CI

on:
  push:
    branches: ["main", "work", "feature/**"]
  pull_request:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  checks:
    name: lint + test
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install LLVM (Windows)
        if: matrix.os == 'windows-latest'
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "16.0"

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: 1.90.0
          components: clippy, rustfmt

      - name: Cache cargo directories
        uses: Swatinem/rust-cache@v2

      - name: Format check
        run: cargo fmt --all -- --check

      - name: Clippy
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

      - name: Tests
        run: cargo test --workspace --all-targets --locked

      - name: Install cargo-deny
        if: matrix.os == 'ubuntu-latest'
        run: cargo install cargo-deny@0.14.24 --locked

      - name: Cargo deny
        if: matrix.os == 'ubuntu-latest'
        run: cargo deny check

      - name: Install cargo-audit
        if: matrix.os == 'ubuntu-latest'
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-audit@0.21.0

      - name: Security tool versions
        if: matrix.os == 'ubuntu-latest'
        run: |
          cargo deny --version
          cargo audit --version

      - name: Cargo audit
        if: matrix.os == 'ubuntu-latest'
        run: cargo audit --deny warnings

      - name: Install cargo-about
        if: matrix.os == 'ubuntu-latest'
        run: cargo install cargo-about@0.6.4 --locked

      - name: Generate license report
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        continue-on-error: true
        run: |
          mkdir -p dist
          cargo about generate about.hjson > dist/LICENSES.html

      - name: Upload license report
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: licenses-${{ matrix.os }}
          path: dist/LICENSES.html

  testnet-integration:
    name: testnet integration
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: 1.90.0

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y jq

      - name: Run testnet health check
        env:
          CARGO: cargo --locked
        run: make testnet-up

      - name: Upload node log
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: testnet-node-log
          path: .testnet/node.log
